(function(){"use strict";const a={sawtooth:{index:0,name:"Sawtooth"},sine:{index:1,name:"Sine"},square:{index:2,name:"square"},triangle:{index:3,name:"triangle"},pseudo_sine:{index:4,name:"pseudo_sine"},polyblep:{index:5,name:"polyblep"}},l={bypass:{index:0,name:"Bypass"},lowpass:{index:1,name:"LowPass"},highpass:{index:2,name:"highPass"},bandpass:{index:3,name:"bandPass"},bandstop:{index:4,name:"bandStop"}},r={oscType:{id:0,name:"OSC Type",defaultValue:0,minValue:0,maxValue:Object.keys(a).length-1},frequency:{id:1,name:"Frequency",defaultValue:440,minValue:20,maxValue:1e4},filterType:{id:2,name:"Filter Type",defaultValue:0,minValue:0,maxValue:Object.keys(l).length-1},cutoff:{id:3,name:"Filter Cutoff",defaultValue:1e3,minValue:20,maxValue:2e4},resonance:{id:4,name:"Filter Q",defaultValue:.7,minValue:.1,maxValue:2},volume:{id:5,name:"Volume",defaultValue:.9,minValue:0,maxValue:1},delayTime:{id:6,name:"DelayTime",defaultValue:0,minValue:0,maxValue:5},feedback:{id:7,name:"Feedback",defaultValue:0,minValue:0,maxValue:1},delayMix:{id:8,name:"DelayMix",defaultValue:0,minValue:0,maxValue:1},distortion:{id:9,name:"Distortion",defaultValue:1,minValue:.1,maxValue:1},tremoroRate:{id:10,name:"tremoroRate",defaultValue:0,minValue:0,maxValue:120},vibratoRate:{id:11,name:"vibratoRate",defaultValue:0,minValue:0,maxValue:120},vibratoDepth:{id:12,name:"vibratoDepth",defaultValue:0,minValue:0,maxValue:1}};var n={oscTypes:a,filterTypes:l,parameters:r};class d extends AudioWorkletProcessor{constructor(t){super(),this.sampleRate=parseFloat(t.processorOptions.sampleRate),this.interpolation=.999,this.desc=n,this.params=this.desc.parameters,this.oscType=this.params.oscType.defaultValue,this.frequency=parseFloat(this.params.frequency.defaultValue)/this.sampleRate,this.iFrequency=this.frequency,this.phase=0,this.filterType=this.params.filterType.defaultValue,this.cutoff=parseFloat(this.params.cutoff.defaultValue)/this.sampleRate,this.iCutoff=this.cutoff,this.resonance=parseFloat(this.params.resonance.defaultValue),this.iResonance=this.resonance,this.update=0,this.filterZ1=0,this.filterZ2=0,this.updateFilterCoefficients(),this.noteOn=!1,this.volume=this.convertVolume(parseFloat(this.params.volume.defaultValue)),this.iVolume=this.volume,this.delayTime=0,this.feedback=0,this.delayMix=0,this.distortion=this.params.distortion.defaultValue,this.tremoroRate=0,this.tremoroPhase=0,this.sampleRate=sampleRate,this.vibratoRate=0,this.vibratoDepth=0,this.vibratoPhase=0,this.port.onmessage=e=>{const s=e.data;s.type=="noteOn"?this.noteOn=s.value:s.type=="param"&&this.setParameter(s.value)}}process(t,e,s){let i=e[0][0];return this.processOscillator(i),this.processDistortion(i),this.processTremoro(i),this.processVibrato(i),this.processDelay(i),this.processFilter(i),this.processAmp(i),!0}processVibrato(t){for(let e=0;e<t.length;e++){const s=Math.sin(2*Math.PI*this.vibratoRate*this.vibratoPhase/this.sampleRate),i=1+this.vibratoDepth*s;this.iFrequency=this.frequency*i,t[e]=t[e]*i,this.vibratoPhase+=1,this.vibratoPhase>=this.sampleRate/this.vibratoRate&&(this.vibratoPhase=0)}}processDelay(t){this.delayBuffer||(this.delayBuffer=new Float32Array(this.sampleRate*5),this.delayBufferIndex=0);for(let e=0;e<t.length;e++){const s=Math.floor(this.delayTime*this.sampleRate),i=(this.delayBufferIndex-s+this.delayBuffer.length)%this.delayBuffer.length,h=this.delayBuffer[i]*this.feedback,o=t[e];t[e]=o*(1-this.delayMix)+h*this.delayMix,this.delayBuffer[this.delayBufferIndex]=o+h,this.delayBufferIndex=(this.delayBufferIndex+1)%this.delayBuffer.length}}processTremoro(t){for(let e=0;e<t.length;e++){const s=Math.sin(2*Math.PI*this.tremoroRate*this.tremoroPhase/this.sampleRate);t[e]=t[e]*(.5*(s+1)),this.tremoroPhase+=1,this.tremoroPhase>=this.sampleRate/this.tremoroRate&&(this.tremoroPhase=0)}}processDistortion(t){for(let e=0;e<t.length;++e)Math.abs(t[e])>this.distortion&&(t[e]>0?(t[e]=this.distortion,t[e]/=this.distortion):(t[e]=-this.distortion,t[e]/=this.distortion))}processOscillator(t){switch(this.oscType){case this.desc.oscTypes.polyblep.index:this.generateSawtooth(t),2*this.frequency;for(let e=0;e<t.length;++e);break;case this.desc.oscTypes.sawtooth.index:this.generateSawtooth(t);break;case this.desc.oscTypes.square.index:this.generateSawtooth(t);for(let e=0;e<t.length;++e)t[e]<0?t[e]=-1:t[e]=1;break;case this.desc.oscTypes.sine.index:this.generateSawtooth(t);for(let e=0;e<t.length;++e)t[e]=Math.cos(Math.PI*t[e]);break;case this.desc.oscTypes.triangle.index:this.generateSawtooth(t);for(let e=0;e<t.length;++e)t[e]<0&&(t[e]*=-1),t[e]=t[e]*2-1;break;case this.desc.oscTypes.pseudo_sine.index:this.generateSawtooth(t);for(let e=0;e<t.length;++e)t[e]=t[e]*4*(Math.abs(t[e])-1);break;default:console.log("Invalid Oscillator Type!");for(let e=0;e<t.length;++e)t[e]=0;break}}processFilter(t){let e;for(let s=0;s<t.length;++s)e=t[s],t[s]=this.filterZ1+this.filterB0*e,this.filterZ1=this.filterZ2+this.filterB1*e+this.filterA1*t[s],this.filterZ2=this.filterB2*e+this.filterA2*t[s],++this.update>16&&(this.update=0,this.iCutoff+=(this.cutoff-this.iCutoff)*.01,this.iResonance+=(this.resonance-this.iResonance)*.01,this.updateFilterCoefficients())}processAmp(t){if(this.noteOn)for(let e=0;e<t.length;++e)this.iVolume+=(this.volume-this.iVolume)*(1-this.interpolation),t[e]*=this.iVolume;else for(let e=0;e<t.length;++e)this.iVolume=this.volume,t[e]=0}generateSawtooth(t){let e=this.iFrequency,s=this.phase;for(let i=0;i<t.length;++i)e+=(this.frequency-e)*(1-this.interpolation),s+=e,s>=1&&(s-=Math.floor(s)),t[i]=2*s-1;this.iFrequency=e,this.phase=s}updateFilterCoefficients(){const t=2*Math.PI*this.iCutoff,e=Math.cos(t),s=Math.sin(t)/this.iResonance,i=s+2;switch(this.filterType){case this.desc.filterTypes.bypass.index:this.filterB0=1,this.filterB1=0,this.filterB2=0,this.filterA1=0,this.filterA2=0;break;case this.desc.filterTypes.lowpass.index:this.filterB0=(1-e)/i,this.filterB1=this.filterB0*2,this.filterB2=this.filterB0,this.filterA1=4*e/i,this.filterA2=(s-2)/i;break;case this.desc.filterTypes.highpass.index:this.filterB0=(1+e)/i,this.filterB1=this.filterB0*-2,this.filterB2=this.filterB0,this.filterA1=4*e/i,this.filterA2=(s-2)/i;break;case this.desc.filterTypes.bandpass.index:this.filterB0=s/i,this.filterB1=0,this.filterB2=this.filterB0*-1,this.filterA1=4*e/i,this.filterA2=(s-2)/i;break;case this.desc.filterTypes.bandstop.index:this.filterB0=2/i,this.filterB1=-4*e/i,this.filterB2=this.filterB0,this.filterA1=4*e/i,this.filterA2=(s-2)/i;break;default:console.log("Invalid Filter Type!"),this.filterB0=0,this.filterB1=0,this.filterB2=0,this.filterA1=0,this.filterA2=0;break}}setParameter(t){switch(t.id){case this.params.oscType.id:this.oscType=t.value;break;case this.params.frequency.id:this.frequency=parseFloat(t.value)/this.sampleRate;break;case this.params.filterType.id:this.filterType=t.value,this.iCutoff=this.cutoff,this.iResonance=this.resonance,this.filterZ1=0,this.filterZ2=0;break;case this.params.cutoff.id:this.cutoff=parseFloat(t.value)/this.sampleRate;break;case this.params.resonance.id:this.resonance=parseFloat(t.value);break;case this.params.volume.id:this.volume=this.convertVolume(parseFloat(t.value));break;case this.params.delayTime.id:this.delayTime=parseFloat(t.value);break;case this.params.feedback.id:this.feedback=parseFloat(t.value);break;case this.params.delayMix.id:this.delayMix=parseFloat(t.value);break;case this.params.distortion.id:this.distortion=parseFloat(t.value);break;case this.params.tremoroRate.id:this.tremoroRate=parseFloat(t.value);break;case this.params.vibratoRate.id:this.vibratoRate=parseFloat(t.value);break;case this.params.vibratoDepth.id:this.vibratoDepth=parseFloat(t.value);break}}convertVolume(t){return t>0?10**((t-1)*2.5):0}}registerProcessor("synthesizer-worklet",d)})();
